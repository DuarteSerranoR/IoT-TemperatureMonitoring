[
    {
        "id": "49205adc630d9e62",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b6bfe6cf5c8975a7",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ef830ba8643f487a",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a1dcd4be55729e02",
        "type": "tab",
        "label": "Flow 4",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "65f642e2b5357bf0",
        "type": "tab",
        "label": "Flow 5",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "eada78bffe31b0ee",
        "type": "tab",
        "label": "Room Temperature Comfort IoT Project",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "82e904f5c5c26253",
        "type": "tab",
        "label": "Temperature Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c26b9058db8173f",
        "type": "tab",
        "label": "Database Utils",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0cdf456eee4faca2",
        "type": "tab",
        "label": "Temperature Model",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2a66695ea3e077da",
        "type": "mqtt-broker",
        "name": "hivemq",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "fcul_iot_g1_0/sensor",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aa3f918d0607a86e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto_broker",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c1bde5c5cae042e2",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "timescale_db",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "temperature_db",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "temp_monitor",
        "userFieldType": "str",
        "password": "fc2023",
        "passwordFieldType": "str"
    },
    {
        "id": "1dbbe41505f6a875",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "05ab338d28506311",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "b62be0f157db7a6d",
        "type": "ui_tab",
        "name": "Historical Data Dashboard Linear Chart",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "307997e3463c4b5d",
        "type": "ui_tab",
        "name": "Historical Data Dashboard Stats",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "570827782eb80e5e",
        "type": "ui_tab",
        "name": "Historical Data Dashboard Monthly Stats",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9137e1ef55ad6cd5",
        "type": "ui_tab",
        "name": "Historical Data Dashboard Daily Stats",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2115f8efaf2412c8",
        "type": "ui_tab",
        "name": "Temperature Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "88fc72d279b77248",
        "type": "ui_group",
        "name": "Historical Data Dashboard Stats Outside",
        "tab": "307997e3463c4b5d",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0b7f86240cd365e",
        "type": "ui_group",
        "name": "Raw",
        "tab": "05ab338d28506311",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0e788045b09315c",
        "type": "ui_group",
        "name": "Historical Data Dashboard Linar Chart",
        "tab": "b62be0f157db7a6d",
        "order": 1,
        "disp": true,
        "width": "27",
        "collapse": false,
        "className": ""
    },
    {
        "id": "08682ef44b2901a9",
        "type": "ui_group",
        "name": "Historical Data Dashboard Stats Inside",
        "tab": "307997e3463c4b5d",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "53efb4f83d4163ec",
        "type": "ui_group",
        "name": "Historical Data Dashboard Stats Total",
        "tab": "307997e3463c4b5d",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f0107cd809f5bb8",
        "type": "ui_group",
        "name": "Monthly Variations",
        "tab": "570827782eb80e5e",
        "order": 4,
        "disp": true,
        "width": "25",
        "collapse": false,
        "className": ""
    },
    {
        "id": "57c5d568b219a078",
        "type": "ui_group",
        "name": "Historical Data Dashboard Stats Monthly Total",
        "tab": "570827782eb80e5e",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a4b51cc31fa97707",
        "type": "ui_group",
        "name": "Historical Data Dashboard Stats Daily Total",
        "tab": "9137e1ef55ad6cd5",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5a03ac5d9b08b46",
        "type": "ui_group",
        "name": "Historical Data Dashboard Monthly Stats Outside",
        "tab": "570827782eb80e5e",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0ac8192562804d6e",
        "type": "ui_group",
        "name": "Historical Data Dashboard Monthly Stats Inside",
        "tab": "570827782eb80e5e",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0aa1394ccb26afe8",
        "type": "ui_group",
        "name": "Historical Data Dashboard Daily Stats Inside",
        "tab": "9137e1ef55ad6cd5",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "13eafad7bf544662",
        "type": "ui_group",
        "name": "Historical Data Dashboard Daily Stats Outside",
        "tab": "9137e1ef55ad6cd5",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1eebc368271218b4",
        "type": "ui_group",
        "name": "Daily Variations",
        "tab": "9137e1ef55ad6cd5",
        "order": 4,
        "disp": true,
        "width": "41",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6fcb8fa133925954",
        "type": "ui_group",
        "name": "Temperature graph",
        "tab": "2115f8efaf2412c8",
        "order": 2,
        "disp": true,
        "width": "22",
        "collapse": false,
        "className": ""
    },
    {
        "id": "58eafe82a730c2c5",
        "type": "fitbit-credentials"
    },
    {
        "id": "41445dc30e2a6a35",
        "type": "mqtt-broker",
        "name": "mosquitoBroker",
        "broker": "34.175.93.216",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "49de7393f66cfd9c",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 1,
        "width": 9,
        "height": 1
    },
    {
        "id": "eb5d8abb8a3ae323",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 3,
        "width": 9,
        "height": 1
    },
    {
        "id": "8111a72bcec81a16",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 4,
        "width": 9,
        "height": 1
    },
    {
        "id": "2b655b8768d5010c",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "f109868c71511fac",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "f73f0ce395678137",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "12bb57da3836253a",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "a03e41aafad84414",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "8a0ea5f13d87e773",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "4637a3229148e690",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 15,
        "width": 3,
        "height": 1
    },
    {
        "id": "26ae07253432068f",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "be0440689d698e7e",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 17,
        "width": 3,
        "height": 1
    },
    {
        "id": "1acd53455902d17a",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 18,
        "width": 3,
        "height": 1
    },
    {
        "id": "d05d0950283d93a1",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 19,
        "width": 3,
        "height": 1
    },
    {
        "id": "adb0951b44d1c212",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "57dd71853b9bbd6d",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 21,
        "width": 3,
        "height": 1
    },
    {
        "id": "04f03bb8cc9101b1",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 22,
        "width": 3,
        "height": 1
    },
    {
        "id": "ba789ac63dd871a7",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 23,
        "width": 9,
        "height": 1
    },
    {
        "id": "9bb567d5e9aecc76",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 24,
        "width": 3,
        "height": 1
    },
    {
        "id": "b804cab9fdb22ab2",
        "type": "ui_spacer",
        "z": "82e904f5c5c26253",
        "name": "spacer",
        "group": "6fcb8fa133925954",
        "order": 25,
        "width": 9,
        "height": 1
    },
    {
        "id": "1fe28d05009a58dc",
        "type": "comment",
        "z": "49205adc630d9e62",
        "name": "node name",
        "info": "some text...\n",
        "x": 470,
        "y": 320,
        "wires": []
    },
    {
        "id": "47ebf7145ccc562e",
        "type": "inject",
        "z": "49205adc630d9e62",
        "name": "Hello World",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello World – from my first NR flow!",
        "payloadType": "str",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "f01172aa3e0c0c21"
            ]
        ]
    },
    {
        "id": "f01172aa3e0c0c21",
        "type": "debug",
        "z": "49205adc630d9e62",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 420,
        "wires": []
    },
    {
        "id": "738ea8ab56ad06f4",
        "type": "mqtt in",
        "z": "b6bfe6cf5c8975a7",
        "name": "",
        "topic": "fcul_iot_g1_0/sensor",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "2a66695ea3e077da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 360,
        "wires": [
            [
                "938a35b247018c6e"
            ]
        ]
    },
    {
        "id": "355c9b0ade5f7851",
        "type": "debug",
        "z": "b6bfe6cf5c8975a7",
        "name": "value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "938a35b247018c6e",
        "type": "json",
        "z": "b6bfe6cf5c8975a7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "355c9b0ade5f7851",
                "f1c5dc353e2a394d"
            ]
        ]
    },
    {
        "id": "f1c5dc353e2a394d",
        "type": "debug",
        "z": "b6bfe6cf5c8975a7",
        "name": "analyze",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.analyze",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "ba3507eeadf334df",
        "type": "inject",
        "z": "ef830ba8643f487a",
        "name": "rand_scheduler",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 450,
        "y": 400,
        "wires": [
            [
                "feac30dda903c8f1"
            ]
        ]
    },
    {
        "id": "feac30dda903c8f1",
        "type": "function",
        "z": "ef830ba8643f487a",
        "name": "rand_num_gen",
        "func": "msg.payload = Math.round(Math.random() * 100);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "04ce4e2eb46aa290"
            ]
        ]
    },
    {
        "id": "04ce4e2eb46aa290",
        "type": "debug",
        "z": "ef830ba8643f487a",
        "name": "print_rand",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 320,
        "wires": []
    },
    {
        "id": "c6ea0b6c9f64d619",
        "type": "trigger",
        "z": "a1dcd4be55729e02",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "num",
        "op2type": "num",
        "duration": "1",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bc1ec2662152d563",
        "type": "inject",
        "z": "a1dcd4be55729e02",
        "name": "#led sensor debug sim",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 340,
        "y": 300,
        "wires": [
            [
                "c6ea0b6c9f64d619"
            ]
        ]
    },
    {
        "id": "300e606a3874aa30",
        "type": "switch",
        "z": "65f642e2b5357bf0",
        "name": "if > 15 dgrees",
        "property": "payload.tempc",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "15",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3a7b8d3967b1f28f",
        "type": "switch",
        "z": "65f642e2b5357bf0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "3fc70f596cf8814c"
            ]
        ]
    },
    {
        "id": "3fc70f596cf8814c",
        "type": "function",
        "z": "65f642e2b5357bf0",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8acc2b9b210c0142",
        "type": "csv",
        "z": "eada78bffe31b0ee",
        "name": "parse csv",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "b28e92c978f4892e",
                "ef4d7c8c69c12e9a"
            ]
        ]
    },
    {
        "id": "ea7d6809f2eedd0a",
        "type": "inject",
        "z": "eada78bffe31b0ee",
        "name": "executor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "2c654635032a7a97"
            ]
        ]
    },
    {
        "id": "2c654635032a7a97",
        "type": "file in",
        "z": "eada78bffe31b0ee",
        "name": "historical data csv file",
        "filename": "/app/historical.data",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 60,
        "wires": [
            [
                "8acc2b9b210c0142"
            ]
        ]
    },
    {
        "id": "186fce137cd7569b",
        "type": "debug",
        "z": "eada78bffe31b0ee",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 140,
        "wires": []
    },
    {
        "id": "ec267fb36c8b748f",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "linear chart format",
        "func": "var r_arr_out = [];\nvar r_arr_in = [];\nmsg.payload.forEach(function(_msg) {\n    if (_msg.label == \"outside\") {\n        let r = { \"x\": _msg.date, \"y\": _msg.temperature };\n        r_arr_out.push(r)\n    }\n    if (_msg.label == \"inside\") {\n        let r = { \"x\": _msg.date, \"y\": _msg.temperature };\n        r_arr_in.push(r)\n    }\n});\nmsg.payload = [{\n    \"series\": [\"outside\",\"inside\"],\n    \"data\": [r_arr_out,r_arr_in],\n    //\"labels\": [\"\"]\n}];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "320ae2d07171a7eb",
                "186fce137cd7569b"
            ]
        ]
    },
    {
        "id": "462386d8da8e4ff1",
        "type": "comment",
        "z": "eada78bffe31b0ee",
        "name": "",
        "info": "https://stevesnoderedguide.com/using-the-node-red-chart-node",
        "x": 80,
        "y": 20,
        "wires": []
    },
    {
        "id": "c9c439e4de4a9698",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "process all data",
        "func": "\nlet max_val_total = -9000;\nlet max_val_total_date = \"\";\n\nlet max_val_in = -9000;\nlet max_val_in_date = \"\";\n\nlet max_val_out = -9000;\nlet max_val_out_date = \"\";\n\nlet min_val_total = 9000;\nlet min_val_total_date = \"\";\n\nlet min_val_in = 9000;\nlet min_val_in_date = \"\";\n\nlet min_val_out = 9000;\nlet min_val_out_date = \"\";\n\nvar outCount = 0;\nvar outSum = Number(0.0);\n\nvar inCount = 0;\nvar inSum = Number(0.0);\n\nvar totalCount = 0;\nvar totalSum = Number(0.0);\n\n//\nlet debugIn = [];\n//\n\nmsg.payload.forEach(\n    function (\n        /** @type {{ label: string; temperature: Number; date: string; }} */ _msg) {\n    \n    let label = _msg.label;\n    let temp = parseFloat(_msg.temperature);\n    if (isNaN(temp))\n        throw _msg;\n    let date = _msg.date;\n\n    if (label == \"outside\") {\n        if (temp > max_val_out) {\n            max_val_out = temp;\n            max_val_out_date = date;\n        }\n        if (temp < min_val_out) {\n            min_val_out = temp;\n            min_val_out_date = date;\n        }\n        outCount += 1;\n        outSum += temp;\n    } else if (label == \"inside\") {\n        if (temp > max_val_in) {\n            max_val_in = temp;\n            max_val_in_date = date;\n        }\n        if (temp < min_val_in) {\n            min_val_in = temp;\n            min_val_in_date = date;\n        }\n        inCount += 1;\n        inSum += temp;\n        //\n        debugIn.push(temp);\n        //\n    }\n    if (temp > max_val_total) {\n        max_val_total = temp;\n        max_val_total_date = date;\n    }\n    if (temp < min_val_total) {\n        min_val_total = temp;\n        min_val_total_date = date;\n    }\n    totalCount += 1;\n    totalSum += temp;\n});\n\nlet totalAvg = totalSum / totalCount;\nlet inAvg = inSum / inCount;\nlet outAvg = outSum / outCount;\n\n// Compute Standard Deviation\nvar totalDevSums = 0;\nvar inDevSums = 0;\nvar outDevSums = 0;\nmsg.payload.forEach(\n    function (\n        /** @type {{ label: string; temperature: Number; date: string; }} */ _msg) {\n\n    let label = _msg.label;\n    let temp = parseFloat(_msg.temperature);\n    if (isNaN(temp))\n        throw _msg;\n    \n\n    if (label == \"outside\") {\n        let outDev = (temp - outAvg) ** 2;\n        outDevSums += outDev;\n    } else if (label == \"inside\") {\n        let inDev = (temp - inAvg) ** 2;\n        inDevSums += inDev;\n    }\n    let totalDev = (temp - totalAvg)**2;\n    totalDevSums += totalDev;\n});\n\nlet outStandardDev = outDevSums / outCount;\nlet inStandardDev = inDevSums / inCount;\nlet totalStandardDev = totalDevSums / totalCount;\n\nif (\"type\" in msg) {\n    msg.payload = {\n        \"total\": {\n            \"type\": `${msg.type}-total`,\n            \"max\": { \"val\": max_val_total, \"date\": max_val_total_date },\n            \"min\": { \"val\": min_val_total, \"date\": min_val_total_date },\n            \"avg\": totalAvg,\n            \"standDev\": totalStandardDev,\n\n            \"count\": totalCount,\n            \"sum\": totalSum\n        },\n        \"inside\": {\n            \"type\": `${msg.type}-inside`,\n            \"max\": { \"val\": max_val_in, \"date\": max_val_in_date },\n            \"min\": { \"val\": min_val_in, \"date\": min_val_in_date },\n            \"avg\": inAvg,\n            \"standDev\": inStandardDev,\n\n            \"count\": inCount,\n            \"sum\": inSum\n        },\n        \"outside\": {\n            \"type\": `${msg.type}-outside`,\n            \"max\": { \"val\": max_val_out, \"date\": max_val_out_date },\n            \"min\": { \"val\": min_val_out, \"date\": min_val_out_date },\n            \"avg\": outAvg,\n            \"standDev\": outStandardDev,\n\n            \"count\": outCount,\n            \"sum\": outSum\n        }\n    }\n} else {\n    msg.payload = { \n        \"total\": {\n            \"type\": \"total\",\n            \"max\": { \"val\": max_val_total, \"date\": max_val_total_date },\n            \"min\": { \"val\": min_val_total, \"date\": min_val_total_date },\n            \"avg\": totalAvg,\n            \"standDev\": totalStandardDev,\n\n            \"count\": totalCount,\n            \"sum\": totalSum\n        },\n        \"inside\": {\n            \"type\": \"inside\",\n            \"max\": { \"val\": max_val_in, \"date\": max_val_in_date },\n            \"min\": { \"val\": min_val_in, \"date\": min_val_in_date },\n            \"avg\": inAvg,\n            \"standDev\": inStandardDev,\n\n            \"count\": inCount,\n            \"sum\": inSum\n        },\n        \"outside\": {\n            \"type\": \"outside\",\n            \"max\": { \"val\": max_val_out, \"date\": max_val_out_date },\n            \"min\": { \"val\": min_val_out, \"date\": min_val_out_date },\n            \"avg\": outAvg,\n            \"standDev\": outStandardDev,\n\n            \"count\": outCount,\n            \"sum\": outSum\n        }\n    }\n}\n\nmsg.debug = {\n        \"total\": [],\n        \"inside\": debugIn,\n        \"outside\": []\n    }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "e8c8cc8e79862ec6",
                "66a77384579192dd",
                "066996cca95d0dea"
            ]
        ]
    },
    {
        "id": "e8c8cc8e79862ec6",
        "type": "debug",
        "z": "eada78bffe31b0ee",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 400,
        "wires": []
    },
    {
        "id": "66a77384579192dd",
        "type": "split",
        "z": "eada78bffe31b0ee",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 460,
        "wires": [
            [
                "f08fc899593c88a8"
            ]
        ]
    },
    {
        "id": "f08fc899593c88a8",
        "type": "switch",
        "z": "eada78bffe31b0ee",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "total",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "outside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "monthly-total",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "monthly-inside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "monthly-outside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "monthly-variations",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "daily-total",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "daily-inside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "daily-outside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "daily-variations",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "44c5a5b1b5067094",
                "5b1317c580dbf498",
                "42daf970b476f548",
                "57ed463baf47cc23"
            ],
            [
                "d19ba005af0079c5",
                "cfcfaf5bb155eac0",
                "b5b4c5bdf91f660c",
                "4f9c23e0fd1aa44f"
            ],
            [
                "464de72d8af7fad0",
                "b2a3b733fd36d831",
                "b4b6fa28585b9f1a",
                "1c93576d7bcc4a64"
            ],
            [
                "3ba1ee73f2b08138",
                "6d4f643fcfc8673e",
                "09c55d14d937b9c6",
                "973bee0fd20c0a8d"
            ],
            [
                "114df67d336fa73b",
                "58cfa08ffa7a792d",
                "7adbf78ef9dd81c0",
                "059fdc6d07830e11"
            ],
            [
                "bd1863aa0e5ee344",
                "439f6d511b9ebfec",
                "54eabe9c71d9ccdc",
                "4d5b62b8020aa97e"
            ],
            [
                "432cf7d7d0ed973a"
            ],
            [
                "a484d1231c645126",
                "1d64f8ad0e29b4e6",
                "cab51cc189bfd58e",
                "40e6deb1181f750a"
            ],
            [
                "ba28e96f2429ca8d",
                "e2bf61b364cebcc5",
                "6571cc53ef633e45",
                "1755752ef1d2dfdd"
            ],
            [
                "a5060cbe537c192c",
                "05781869da124c36",
                "4ea58d0ca37a800d",
                "d427eb24ccdce873"
            ],
            [
                "8cb4f9a00c6b2872"
            ]
        ]
    },
    {
        "id": "066996cca95d0dea",
        "type": "debug",
        "z": "eada78bffe31b0ee",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "debug",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "b28e92c978f4892e",
        "type": "debug",
        "z": "eada78bffe31b0ee",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "ef4d7c8c69c12e9a",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "filter",
        "func": "msg.payload = msg.payload.filter(\n    function(/** @type {{ temperature: string | number; }} */ o){\n\n        let temp = parseFloat(o.temperature);\n        if (isNaN(temp))\n            return false;\n        else\n            return true;\n    });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "ec267fb36c8b748f",
                "c9c439e4de4a9698",
                "b28e92c978f4892e",
                "1558639f5cbf8f07",
                "0f084666f33326b4"
            ]
        ]
    },
    {
        "id": "1558639f5cbf8f07",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "monthly average filter",
        "func": "\nmsg.type = \"monthly\";\nvar o_cache_inside = null;\nvar o_cache_outside = null;\nvar monthly_payload = [];\nmsg.payload.map(function (o) {\n    let _ = o.date.split(\"-\")\n    o.date = _[0] + \"-\" + _[1];\n    return o;\n}).forEach(function (o) {\n    if (o.label == \"inside\") {\n        if (o_cache_inside === null) {\n            o_cache_inside = o;\n            o_cache_inside.count = 1;\n        } else if (o_cache_inside.date != o.date) {\n            o_cache_inside.temperature = o_cache_inside.temperature / o_cache_inside.count;\n            monthly_payload.push(o_cache_inside);\n            o_cache_inside = o;\n            o_cache_inside.count = 1;\n        } else {\n            o_cache_inside.temperature += o.temperature;\n            o_cache_inside.count++;\n        }\n    } else { // outside\n        if (o_cache_outside === null) {\n            o_cache_outside = o;\n            o_cache_outside.count = 1;\n        } else if (o_cache_outside.date != o.date) {\n            o_cache_outside.temperature = o_cache_outside.temperature / o_cache_outside.count;\n            monthly_payload.push(o_cache_outside);\n            o_cache_outside = o;\n            o_cache_outside.count = 1;\n        } else {\n            o_cache_outside.temperature += o.temperature;\n            o_cache_outside.count++;\n        }\n    }\n});\n\nif (o_cache_inside) {\n    o_cache_inside.temperature = o_cache_inside.temperature / o_cache_inside.count;\n    monthly_payload.push(o_cache_inside);\n}\nif (o_cache_outside) {\n    o_cache_outside.temperature = o_cache_outside.temperature / o_cache_outside.count;\n    monthly_payload.push(o_cache_outside);\n}\n\n\nmsg.payload = monthly_payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 360,
        "wires": [
            [
                "c9c439e4de4a9698",
                "b6152f80dbd5b519"
            ]
        ]
    },
    {
        "id": "0f084666f33326b4",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "daily average filter",
        "func": "\nmsg.type = \"daily\";\nvar o_cache_inside = null;\nvar o_cache_outside = null;\nvar daily_payload = [];\nmsg.payload.map(function (o) {\n    o.date = o.date.split(\" \")[0];\n    return o;\n}).forEach(function(o) {\n    if (o.label == \"inside\") {\n        if (o_cache_inside === null) {\n            o_cache_inside = o;\n            o_cache_inside.count = 1;\n        } else if (o_cache_inside.date != o.date) {\n            o_cache_inside.temperature = o_cache_inside.temperature / o_cache_inside.count;\n            daily_payload.push(o_cache_inside);\n            o_cache_inside = o;\n            o_cache_inside.count = 1;\n        } else {\n            o_cache_inside.temperature += o.temperature;\n            o_cache_inside.count++;\n        }\n    } else { // outside\n        if (o_cache_outside === null) {\n            o_cache_outside = o;\n            o_cache_outside.count = 1;\n        } else if (o_cache_outside.date != o.date) {\n            o_cache_outside.temperature = o_cache_outside.temperature / o_cache_outside.count;\n            daily_payload.push(o_cache_outside);\n            o_cache_outside = o;\n            o_cache_outside.count = 1;\n        } else {\n            o_cache_outside.temperature += o.temperature;\n            o_cache_outside.count++;\n        }\n    }\n});\n\nif (o_cache_inside) {\n    o_cache_inside.temperature = o_cache_inside.temperature / o_cache_inside.count;\n    daily_payload.push(o_cache_inside);\n}\nif (o_cache_outside) {\n    o_cache_outside.temperature = o_cache_outside.temperature / o_cache_outside.count;\n    daily_payload.push(o_cache_outside);\n}\n\n\nmsg.payload = daily_payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "c9c439e4de4a9698",
                "b6152f80dbd5b519"
            ]
        ]
    },
    {
        "id": "b6152f80dbd5b519",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "map graph data",
        "func": "var r_arr_out = [];\nvar r_arr_in = [];\nmsg.payload.forEach(function (_msg) {\n    if (_msg.label == \"outside\") {\n        let r = { \"x\": _msg.date, \"y\": _msg.temperature };\n        r_arr_out.push(r)\n    }\n    if (_msg.label == \"inside\") {\n        let r = { \"x\": _msg.date, \"y\": _msg.temperature };\n        r_arr_in.push(r)\n    }\n});\nmsg.payload = {\n    \"type\": `${msg.type}-variations`,\n    \"series\": [\"outside\", \"inside\"],\n    \"data\": [r_arr_out, r_arr_in],\n    //\"labels\": [\"\"]\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 780,
        "wires": [
            [
                "f08fc899593c88a8",
                "c9beeaaa23aefb0e"
            ]
        ]
    },
    {
        "id": "c9beeaaa23aefb0e",
        "type": "debug",
        "z": "eada78bffe31b0ee",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 840,
        "wires": []
    },
    {
        "id": "432cf7d7d0ed973a",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "format monthly variations",
        "func": "\nmsg.payload = [{\n    \"series\": msg.payload.series,\n    \"data\": msg.payload.data,\n    //\"labels\": [\"\"]\n}];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1020,
        "wires": [
            [
                "7ceb591baaf0a2db"
            ]
        ]
    },
    {
        "id": "8cb4f9a00c6b2872",
        "type": "function",
        "z": "eada78bffe31b0ee",
        "name": "format daily variations",
        "func": "\nmsg.payload = [{\n    \"series\": msg.payload.series,\n    \"data\": msg.payload.data,\n    //\"labels\": [\"\"]\n}];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1580,
        "wires": [
            [
                "c5d0f978928948ee"
            ]
        ]
    },
    {
        "id": "42daf970b476f548",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "53efb4f83d4163ec",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average total",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 950,
        "y": 100,
        "wires": []
    },
    {
        "id": "57ed463baf47cc23",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "53efb4f83d4163ec",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation total",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 140,
        "wires": []
    },
    {
        "id": "b5b4c5bdf91f660c",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "08682ef44b2901a9",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average inside",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "4f9c23e0fd1aa44f",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "08682ef44b2901a9",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation inside",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "b4b6fa28585b9f1a",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "88fc72d279b77248",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average outside",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "1c93576d7bcc4a64",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "88fc72d279b77248",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation outside",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 460,
        "wires": []
    },
    {
        "id": "09c55d14d937b9c6",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "57c5d568b219a078",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "average total monthly",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 980,
        "y": 600,
        "wires": []
    },
    {
        "id": "973bee0fd20c0a8d",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "57c5d568b219a078",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "standard deviation total monthly",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1010,
        "y": 640,
        "wires": []
    },
    {
        "id": "7adbf78ef9dd81c0",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "0ac8192562804d6e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average inside monthly",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 760,
        "wires": []
    },
    {
        "id": "059fdc6d07830e11",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "0ac8192562804d6e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation inside monthly",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1020,
        "y": 800,
        "wires": []
    },
    {
        "id": "54eabe9c71d9ccdc",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "c5a03ac5d9b08b46",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average outside monthly",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 990,
        "y": 920,
        "wires": []
    },
    {
        "id": "4d5b62b8020aa97e",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "c5a03ac5d9b08b46",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation outside monthly",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1020,
        "y": 960,
        "wires": []
    },
    {
        "id": "cab51cc189bfd58e",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "a4b51cc31fa97707",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average total daily",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 970,
        "y": 1160,
        "wires": []
    },
    {
        "id": "40e6deb1181f750a",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "a4b51cc31fa97707",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation total daily",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1000,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6571cc53ef633e45",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "0aa1394ccb26afe8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average inside daily",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 980,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1755752ef1d2dfdd",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "0aa1394ccb26afe8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation inside daily",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1010,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4ea58d0ca37a800d",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "13eafad7bf544662",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "average outside daily",
        "label": "Average",
        "format": "{{msg.payload.avg}}",
        "layout": "col-center",
        "className": "",
        "x": 980,
        "y": 1480,
        "wires": []
    },
    {
        "id": "d427eb24ccdce873",
        "type": "ui_text",
        "z": "eada78bffe31b0ee",
        "group": "13eafad7bf544662",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "standard deviation outside daily",
        "label": "Standard Deviation",
        "format": "{{msg.payload.standDev}}",
        "layout": "col-center",
        "className": "",
        "x": 1010,
        "y": 1520,
        "wires": []
    },
    {
        "id": "320ae2d07171a7eb",
        "type": "ui_chart",
        "z": "eada78bffe31b0ee",
        "name": "",
        "group": "c0e788045b09315c",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "YYYY-MM-DD HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7ceb591baaf0a2db",
        "type": "ui_chart",
        "z": "eada78bffe31b0ee",
        "name": "",
        "group": "2f0107cd809f5bb8",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "monthly variations",
        "chartType": "line",
        "legend": "true",
        "xformat": "YYYY-MM-DD",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1270,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c5d0f978928948ee",
        "type": "ui_chart",
        "z": "eada78bffe31b0ee",
        "name": "",
        "group": "1eebc368271218b4",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "daily variations",
        "chartType": "line",
        "legend": "true",
        "xformat": "YYYY-MM-DD",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1260,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "44c5a5b1b5067094",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "53efb4f83d4163ec",
        "name": "maximum total",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Total</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "5b1317c580dbf498",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "53efb4f83d4163ec",
        "name": "minimum total",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d19ba005af0079c5",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "08682ef44b2901a9",
        "name": "maximum inside",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Total</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "cfcfaf5bb155eac0",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "08682ef44b2901a9",
        "name": "minimum inside",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "464de72d8af7fad0",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "88fc72d279b77248",
        "name": "maximum outside",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Total</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a3b733fd36d831",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "88fc72d279b77248",
        "name": "minimum outside",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3ba1ee73f2b08138",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "57c5d568b219a078",
        "name": "maximum total monthly",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h1>Monthly</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "6d4f643fcfc8673e",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "57c5d568b219a078",
        "name": "minimum total monthly",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "114df67d336fa73b",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "0ac8192562804d6e",
        "name": "maximum inside monthly",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Monthly</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "58cfa08ffa7a792d",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "0ac8192562804d6e",
        "name": "minimum inside monthly",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "bd1863aa0e5ee344",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "c5a03ac5d9b08b46",
        "name": "maximum outside monthly",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Monthly</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "439f6d511b9ebfec",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "c5a03ac5d9b08b46",
        "name": "minimum outside monthly",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a484d1231c645126",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "a4b51cc31fa97707",
        "name": "maximum total daily",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Daily</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "1d64f8ad0e29b4e6",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "a4b51cc31fa97707",
        "name": "minimum total daily",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "ba28e96f2429ca8d",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "0aa1394ccb26afe8",
        "name": "maximum inside daily",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Daily</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "e2bf61b364cebcc5",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "0aa1394ccb26afe8",
        "name": "minimum inside daily",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "a5060cbe537c192c",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "13eafad7bf544662",
        "name": "maximum outside daily",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h1>Daily</h1>\n<p>Maximum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.max.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "05781869da124c36",
        "type": "ui_template",
        "z": "eada78bffe31b0ee",
        "group": "13eafad7bf544662",
        "name": "minimum outside daily",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p>Minimum</p>\n<table>\n\n    <tr>\n        <th style=\"width: 50%;\">date</th>\n        <th style=\"width: 50%;\">val</th>\n    </tr>\n    <tr>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.date\" /></th>\n        <th style=\"width: 50%;\"><div ng-bind-html=\"msg.payload.min.val\" /></th>\n    </tr>\n\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "d3316c6f29ed4a1a",
        "type": "file in",
        "z": "82e904f5c5c26253",
        "name": "online data csv file",
        "filename": "/app/online.data",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "a686d1486de261e0"
            ]
        ]
    },
    {
        "id": "b8ec03eff8b5b133",
        "type": "inject",
        "z": "82e904f5c5c26253",
        "name": "timestamp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "d3316c6f29ed4a1a"
            ]
        ]
    },
    {
        "id": "c89a25c7f038a235",
        "type": "comment",
        "z": "82e904f5c5c26253",
        "name": "2020-12-31 15:00:00,7.022,outside",
        "info": "",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "a29cc260b8743db1",
        "type": "ui_chart",
        "z": "82e904f5c5c26253",
        "name": "",
        "group": "6fcb8fa133925954",
        "order": 7,
        "width": 11,
        "height": 8,
        "label": "Online.data graph inside",
        "chartType": "line",
        "legend": "true",
        "xformat": "DD/MM-HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "100",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#80ffff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "231cf1d9bea8b44e",
        "type": "inject",
        "z": "82e904f5c5c26253",
        "name": "Create DB",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "9a650bbcb1e0fa43"
            ]
        ]
    },
    {
        "id": "9a650bbcb1e0fa43",
        "type": "postgresql",
        "z": "82e904f5c5c26253",
        "d": true,
        "name": "Create online.data DB",
        "query": "CREATE TABLE onlineData\n(\n    id serial PRIMARY KEY,times TIMESTAMP, date text, temperature text, label text\n)\nWITH (\n    OIDS=FALSE\n);",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "19668be52dfe5819",
        "type": "csv",
        "z": "82e904f5c5c26253",
        "d": true,
        "name": "parse csv",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "2f1e770d0a4d4a59"
            ]
        ]
    },
    {
        "id": "0e049acda812eec9",
        "type": "switch",
        "z": "82e904f5c5c26253",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "temperature_outside",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "temperature_inside",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 360,
        "wires": [
            [
                "5c3e64eb34b10075",
                "2de7b7ad24bca920"
            ],
            [
                "a29cc260b8743db1",
                "376b24f90d87e4c5"
            ]
        ]
    },
    {
        "id": "5c3e64eb34b10075",
        "type": "ui_chart",
        "z": "82e904f5c5c26253",
        "name": "",
        "group": "6fcb8fa133925954",
        "order": 6,
        "width": 11,
        "height": 8,
        "label": "Online.data graph outside",
        "chartType": "line",
        "legend": "true",
        "xformat": "DD/MM-HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "100",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#80ffff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e5114b26efa3479d",
        "type": "delay",
        "z": "82e904f5c5c26253",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 360,
        "wires": [
            [
                "8d184303f770b736",
                "b012c8171556cfef",
                "6b7527361759260a"
            ]
        ]
    },
    {
        "id": "8d184303f770b736",
        "type": "function",
        "z": "82e904f5c5c26253",
        "d": true,
        "name": "",
        "func": "function toTimestamp(strDate) {\n    var datum = Date.parse(strDate);\n    return datum;\n}\n\nvar payload = msg.payload;\n\nmsg.payload = parseFloat(payload.temperature);\nmsg.timestamp = toTimestamp(payload.date);\n\nif (payload.label == \"inside\") {\n    msg.topic = \"temperature_inside\";\n}\nelse if (payload.label == \"outside\") {\n    msg.topic = \"temperature_outside\";\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "2f1e770d0a4d4a59",
        "type": "function",
        "z": "82e904f5c5c26253",
        "d": true,
        "name": "",
        "func": "var payload = msg.payload;\nvar temperature_in = [];\nvar temperature_out = [];\n\nfor (let i = 0; i < payload.length; i++) {\n    var temp = {\"x\": payload[i].date, \"y\": parseFloat(payload[i].temperature)};\n\n    if (payload[i].label == \"inside\") {\n        temperature_in.push(temp);\n    }\n    else if (payload[i].label == \"outside\") {\n        temperature_out.push(temp);\n    }\n}\n\nmsg.payload = [{\n    \"series\" : [\"temperature_outside\", \"temperature_inside\"],\n    \"data\" : [temperature_out, temperature_in],\n    \"labels\" : [\"Temperature outside\", \"Temperature inside\"]\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "a686d1486de261e0",
        "type": "csv",
        "z": "82e904f5c5c26253",
        "name": "parse csv",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "e5114b26efa3479d"
            ]
        ]
    },
    {
        "id": "7a3384bd529f1f88",
        "type": "comment",
        "z": "82e904f5c5c26253",
        "name": "2020-02-08 09:30:26",
        "info": "",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "b012c8171556cfef",
        "type": "function",
        "z": "82e904f5c5c26253",
        "d": true,
        "name": "",
        "func": "function toTimestamp(strDate) {\n    var datum = Date.parse(strDate);\n    return datum;\n}\n\nvar payload = msg.payload;\n\nvar last_temp = parseFloat(payload.temperature);\nvar last_date = toTimestamp(payload.date);\nvar future_temp = [];\nvar future_date = [];\nvar data_out = [];\n\nvar prediction = { \"x\": last_date, \"y\": last_temp };\ndata_out.push(prediction);\n\nfor (let i = 0; i < 4; i++) {\n    let sign = 1;\n    if (Math.random() > 0.5) {\n        sign = -1;\n    }\n    last_temp = last_temp + Math.random() * sign * 5;\n    last_date = last_date + 30*60*1000;\n    prediction = {\"x\": last_date, \"y\": last_temp};\n    data_out.push(prediction)\n}\n\nmsg.payload = [{\n\n    \"series\": [\"Temperature prediction\"],\n    \"data\": [data_out],\n    \"labels\": [\"temperature_prediction\"]\n}];\n\nmsg.timestamp = payload.date;\n\nif (payload.label == \"inside\") {\n    msg.topic = \"temperature_inside\";\n}\nelse if (payload.label == \"outside\") {\n    msg.topic = \"temperature_outside\";\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "972f19a7bb22d1f0",
        "type": "ui_button",
        "z": "82e904f5c5c26253",
        "name": "",
        "group": "6fcb8fa133925954",
        "order": 2,
        "width": 4,
        "height": 2,
        "passthru": false,
        "label": "Refresh charts",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "a29cc260b8743db1",
                "5c3e64eb34b10075",
                "a021ba95362e9a81"
            ]
        ]
    },
    {
        "id": "6b7527361759260a",
        "type": "function",
        "z": "82e904f5c5c26253",
        "name": "",
        "func": "function toTimestamp(strDate) {\n    var datum = Date.parse(strDate);\n\n    return datum;\n}\n\nfunction nextPrediction(last_temp, last_date) {\n    let sign = 1;\n    if (Math.random() > 0.5) {\n        sign = -1;\n    }\n    var temp = last_temp + Math.random() * sign * 5;\n    var date = last_date + (30 * 60 * 1000);\n    var prediction = { \"x\": date, \"y\": temp };\n\n    return prediction;\n}\n\nconst GRAPH_SAMPLES = 10;\nconst GRAPH_SAMPLES_PRED = 5;\n\nvar temp_samples_in = context.get('temp_samples_in') || [];\nvar temp_samples_out = context.get('temp_samples_out') || [];\nvar count_outside = context.get('count_outside') || 0;\nvar count_inside = context.get('count_inside') || 0;\n\nvar payload = msg.payload;\nvar last_temp = parseFloat(payload.temperature);\nvar last_date = toTimestamp(payload.date);\n\nvar temp_samples = [];\nvar future_temp_samples = [];\n\nvar last_sample = { \"x\": last_date, \"y\": last_temp };\n\nif (payload.label == \"inside\") {\n    msg.topic = \"temperature_inside\";\n    var length = temp_samples_in.length;\n    \n    if (length < GRAPH_SAMPLES) {\n        temp_samples_in.push(last_sample);\n    }\n    else {\n        for (let i = 0; i < (length - 1); i++) {\n            temp_samples_in[i] = temp_samples_in[i + 1];\n        }\n        temp_samples_in[length - 1] = last_sample;\n        temp_samples = temp_samples_in;\n    }\n\n    if (count_inside < GRAPH_SAMPLES) {\n        count_inside += 1;\n    }\n    else {\n        // var prediction = { \"x\": last_date, \"y\": last_temp };\n        future_temp_samples.push(last_sample);\n\n        for (let i = 0; i < GRAPH_SAMPLES_PRED; i++) {\n            // last_temp = randomNum(last_temp);\n            // last_date = last_date + 30 * 60 * 1000;\n            // let prediction = { \"x\": last_date, \"y\": last_temp };\n            let prediction = nextPrediction(last_temp, last_date);\n            last_temp = prediction.y;\n            last_date = prediction.x;\n            \n            future_temp_samples.push(prediction)\n        }\n    }\n}\nelse if (payload.label == \"outside\") {\n    msg.topic = \"temperature_outside\";\n    var length = temp_samples_out.length;\n    if (length < GRAPH_SAMPLES) {\n        temp_samples_out.push(last_sample);\n    }\n    else {\n        for (let i = 0; i < (length - 1); i++) {\n            temp_samples_out[i] = temp_samples_out[i + 1];\n        }\n\n        temp_samples_out[length - 1] = last_sample;\n        temp_samples = temp_samples_out;\n    }\n\n    if (count_outside < GRAPH_SAMPLES) {\n        count_outside += 1;\n    }\n    else {\n        // var prediction = { \"x\": last_date, \"y\": last_temp };\n        future_temp_samples.push(last_sample);\n\n        for (let i = 0; i < GRAPH_SAMPLES_PRED; i++) {\n            let prediction = nextPrediction(last_temp, last_date);\n            last_temp = prediction.y;\n            last_date = prediction.x;\n            \n            future_temp_samples.push(prediction)\n        }\n    }\n}\n\nmsg.payload = [{\n    \"series\": [\"Actual temperature\", \"Temperature prediction\"],\n    \"data\": [temp_samples, future_temp_samples],\n    \"labels\": [\"actual_temperature\", \"temperature_prediction\"]\n}];\n// msg = {\"payload\": {\"count_out\": count_outside, \"count_in\": count_inside}};\n\nmsg.timestamp = payload.date;\n\ncontext.set('temp_samples_in', temp_samples_in);\ncontext.set('temp_samples_out', temp_samples_out);\ncontext.set('count_outside', count_outside);\ncontext.set('count_inside', count_inside);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "0e049acda812eec9"
            ]
        ]
    },
    {
        "id": "98a8db7a26986928",
        "type": "comment",
        "z": "82e904f5c5c26253",
        "name": "Deviation calculation rules",
        "info": "● if the average outside air temperature varies between 0 ºC and 9 ºC, then the\nthermal comfort temperature varies linearly from 23 ºC to 18 ºC;\n● if the average outside air temperature varies between 9 ºC and 34 ºC, then the\nthermal comfort temperature varies linearly from 18 ºC to 30 ºC\n\nFor the calculations, consider a continuous moving average of the outside air temperature\nover a data window corresponding to the last week.",
        "x": 670,
        "y": 180,
        "wires": []
    },
    {
        "id": "a021ba95362e9a81",
        "type": "ui_chart",
        "z": "82e904f5c5c26253",
        "name": "",
        "group": "6fcb8fa133925954",
        "order": 9,
        "width": 10,
        "height": 8,
        "label": "Thermal comfort deviation",
        "chartType": "line",
        "legend": "true",
        "xformat": "DD/MM-HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-10",
        "ymax": "10",
        "removeOlder": "10",
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#80ffff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1350,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "2de7b7ad24bca920",
        "type": "function",
        "z": "82e904f5c5c26253",
        "name": "Week average",
        "func": "var samples_out = flow.get('samples_out') || [];\nvar mean_val = flow.get('mean_val') || 0;\nvar samples_out_cnt = context.get('samples_out_cnt') || 0;\n\nvar samples = msg.payload[0].data[0];\nvar length = samples.length;\nvar last_sample_temp = samples[length - 1][\"y\"];\n\n// days * hours * (30 minutes in an hour)\nconst week_samples = 7 * 24 * 2;\n\nsamples_out[samples_out_cnt % week_samples] = last_sample_temp;\nsamples_out_cnt += 1;\n\nvar sum = 0;\nfor (let i = 0; i < samples_out.length; i++) {\n    sum += samples_out[i];\n}\nmean_val = sum / samples_out.length;\n\nflow.set('samples_out', samples_out);\nflow.set('mean_val', mean_val);\ncontext.set('samples_out_cnt', samples_out_cnt);\n\n// msg = {\"payload\": { \"mean\": mean_val, \"last_sample\": samples_out[samples_out.length-1]}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "13956eb9d519bec0",
        "type": "debug",
        "z": "82e904f5c5c26253",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 360,
        "wires": []
    },
    {
        "id": "376b24f90d87e4c5",
        "type": "function",
        "z": "82e904f5c5c26253",
        "name": "Thermal comfort",
        "func": "var thermalComfort = function(mean_val) {\n    var thermal_comfort_temp;\n\n    if (mean_val >= 0 && mean_val <= 9) {\n        thermal_comfort_temp = 18 - (23 - 18) * (mean_val / 9);\n    }\n    else if (mean_val >= 9 && mean_val <= 34) {\n        thermal_comfort_temp = 18 + (30 - 18) * (mean_val / 25);\n    }\n\n    return thermal_comfort_temp;\n}\n\nvar mean_val = flow.get('mean_val') || 0;\n\nvar thermal_comfort_temp = thermalComfort(mean_val);\nvar last_deviations = [];\nvar samples_in = msg.payload[0].data[0];\n\nfor (let i = 0; i < samples_in.length; i++) {\n    last_deviations[i] = {\n        \"x\": samples_in[i][\"x\"], \"y\": (samples_in[i][\"y\"] - thermal_comfort_temp)};\n}\n\nvar future_deviations = [last_deviations[last_deviations.length-1]];\nvar samples_in_prediction = msg.payload[0].data[1];\n\nfor (let i = 1; i < (samples_in_prediction.length); i++) {\n    future_deviations[i] = {\n        \"x\": samples_in_prediction[i][\"x\"], \"y\": (samples_in_prediction[i][\"y\"] - thermal_comfort_temp)\n    };\n}\n\nmsg = {\"payload\": [{\n    \"series\": [\"Last deviations\", \"Future deviations\"],\n    \"data\": [last_deviations, future_deviations],\n    \"labels\": [\"\", \"\"]\n}]};\nmsg.topic = \"deviations\";\n\n// msg = { \"payload\": {\"last\": last_deviations, \"future\": future_deviations}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "a021ba95362e9a81",
                "cc8454fb861902b9"
            ]
        ]
    },
    {
        "id": "503918aa7b25bda1",
        "type": "ui_gauge",
        "z": "82e904f5c5c26253",
        "name": "Thermal comfort",
        "group": "6fcb8fa133925954",
        "order": 10,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "*C",
        "format": "{{value | number:2}}",
        "min": "-5",
        "max": "5",
        "colors": [
            "#2260df",
            "#c0c0c0",
            "#e92929"
        ],
        "seg1": "-1",
        "seg2": "1",
        "className": "",
        "x": 1560,
        "y": 420,
        "wires": []
    },
    {
        "id": "cc8454fb861902b9",
        "type": "function",
        "z": "82e904f5c5c26253",
        "name": "",
        "func": "var payload_data = msg.payload[0].data;\n\nvar length = payload_data[0].length;\nvar deviation = payload_data[0][length-1][\"y\"];\n\nmsg = {\n    \"payload\": deviation,\n    \"topic\": \"Current thermal comfort deviation\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 420,
        "wires": [
            [
                "503918aa7b25bda1",
                "13956eb9d519bec0"
            ]
        ]
    },
    {
        "id": "2a500ffbb2347df6",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "name": "Load Historical Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "70cb1d24919f6d6c"
            ]
        ]
    },
    {
        "id": "ce6ffb3b803686fc",
        "type": "file in",
        "z": "2c26b9058db8173f",
        "name": "read historical data csv file",
        "filename": "/app/historical.data",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 60,
        "wires": [
            [
                "dfe9b04a6dcc580a"
            ]
        ]
    },
    {
        "id": "dfe9b04a6dcc580a",
        "type": "csv",
        "z": "2c26b9058db8173f",
        "name": "parse csv",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 920,
        "y": 60,
        "wires": [
            [
                "f32d4832927a420f"
            ]
        ]
    },
    {
        "id": "f32d4832927a420f",
        "type": "function",
        "z": "2c26b9058db8173f",
        "name": "",
        "func": "\nlet date = msg.payload.date;\nlet temperature = msg.payload.temperature;\nlet label = msg.payload.label;\n\nmsg.params = [date, temperature, label];\nif (temperature != null)\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "c5ab34a68f470922"
            ]
        ]
    },
    {
        "id": "c5ab34a68f470922",
        "type": "delay",
        "z": "2c26b9058db8173f",
        "name": "message pooler",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3500",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 60,
        "wires": [
            [
                "501e883d75814a02"
            ]
        ]
    },
    {
        "id": "c75e2a82787cfb26",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "Load Online Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "c828a0a1d636b849"
            ]
        ]
    },
    {
        "id": "691504a54d0a2ebf",
        "type": "file in",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "read online data csv file",
        "filename": "/app/online.data",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 690,
        "y": 480,
        "wires": [
            [
                "b5c7e71320bf45d9"
            ]
        ]
    },
    {
        "id": "b5c7e71320bf45d9",
        "type": "csv",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "parse csv",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 920,
        "y": 480,
        "wires": [
            [
                "f765bef7caa879ac"
            ]
        ]
    },
    {
        "id": "3c6f6f304d9e570c",
        "type": "function",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "",
        "func": "\nlet date = msg.payload.date;\nlet temperature = msg.payload.temperature;\nlet label = msg.payload.label;\n\nmsg.params = [date, temperature, label];\nif (temperature != null)\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 540,
        "wires": [
            [
                "c4e4382e292dfdfe"
            ]
        ]
    },
    {
        "id": "f765bef7caa879ac",
        "type": "delay",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "message pooler",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3500",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1160,
        "y": 480,
        "wires": [
            [
                "7d2ca4fae2fd45f5"
            ]
        ]
    },
    {
        "id": "6958fb34e42edb4d",
        "type": "mqtt in",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "auto",
        "broker": "2a66695ea3e077da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 540,
        "wires": [
            [
                "3c6f6f304d9e570c"
            ]
        ]
    },
    {
        "id": "7d2ca4fae2fd45f5",
        "type": "mqtt out",
        "z": "2c26b9058db8173f",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa3f918d0607a86e",
        "x": 1430,
        "y": 480,
        "wires": []
    },
    {
        "id": "70cb1d24919f6d6c",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "Truncate Historical Table",
        "query": "TRUNCATE historical_data;",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 60,
        "wires": [
            [
                "ce6ffb3b803686fc"
            ]
        ]
    },
    {
        "id": "501e883d75814a02",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "Insert Historical Data",
        "query": "\nINSERT INTO historical_data\n(date, temperature, label)\nVALUES (TO_TIMESTAMP($1,'YYYY-MM-DD HH24:MI:SS'), $2, $3)\n;\n",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1480,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c828a0a1d636b849",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "Truncate Online Table",
        "query": "TRUNCATE online_data;",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 480,
        "wires": [
            [
                "691504a54d0a2ebf"
            ]
        ]
    },
    {
        "id": "c4e4382e292dfdfe",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "Insert Online Data",
        "query": "\nINSERT INTO online_data\n(date, temperature, label)\nVALUES (TO_TIMESTAMP($1,'YYYY-MM-DD HH24:MI:SS'), $2, $3)\n;\n",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 670,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e38fcd69b348ee88",
        "type": "debug",
        "z": "2c26b9058db8173f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "ae7c1c2c7f154272",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "test historical data",
        "query": "SELECT * FROM historical_data\norder by date desc\nlimit 10;",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "e38fcd69b348ee88"
            ]
        ]
    },
    {
        "id": "91d1cb00ae0403c9",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "ae7c1c2c7f154272"
            ]
        ]
    },
    {
        "id": "350bec9cbc788d41",
        "type": "mqtt in",
        "z": "2c26b9058db8173f",
        "name": "",
        "topic": "idc/fc55309",
        "qos": "2",
        "datatype": "auto",
        "broker": "41445dc30e2a6a35",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 720,
        "wires": [
            [
                "84d479588f89237d"
            ]
        ]
    },
    {
        "id": "70fc37ac5fe958a4",
        "type": "debug",
        "z": "2c26b9058db8173f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "label",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 840,
        "wires": []
    },
    {
        "id": "84d479588f89237d",
        "type": "function",
        "z": "2c26b9058db8173f",
        "name": "",
        "func": "var msg2 = msg.payload.split(\",\")\nvar date = msg2[0]\nvar temperature = msg2[1]\nvar label = msg2[2]\n\nmsg.params = [date, temperature, label];\nmsg.date = date\nmsg.temperature = temperature\nmsg.label = label\n\n\nif (temperature != null)\n    return msg;\nelse\n    return \"error\"",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 720,
        "wires": [
            [
                "1641fc6257084e70",
                "70fc37ac5fe958a4"
            ]
        ]
    },
    {
        "id": "1641fc6257084e70",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "Insert Online Data",
        "query": "INSERT INTO online_data\n(msg.date, msg.temperature, msg.label)\nVALUES (TO_TIMESTAMP($1,'YYYY-MM-DD HH24:MI:SS'), $2, $3)\n",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 730,
        "y": 700,
        "wires": [
            [
                "7a963a77bbd85a36"
            ]
        ]
    },
    {
        "id": "f66ffc3d84156454",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "name": "teste_inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "olá",
        "payloadType": "str",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "53b904e0bcb74c25"
            ]
        ]
    },
    {
        "id": "53b904e0bcb74c25",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "SELECT * from online_data",
        "query": "SELECT * FROM online_data;",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 360,
        "y": 300,
        "wires": [
            [
                "db6bbba2d267ce26"
            ]
        ]
    },
    {
        "id": "db6bbba2d267ce26",
        "type": "debug",
        "z": "2c26b9058db8173f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "6d70383ae8b8e4ce",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "492961dbe33c8c36"
            ]
        ]
    },
    {
        "id": "492961dbe33c8c36",
        "type": "postgresql",
        "z": "2c26b9058db8173f",
        "name": "truncate online data",
        "query": "TRUNCATE online_data;",
        "postgreSQLConfig": "c1bde5c5cae042e2",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "ebc7bbf602c46991"
            ]
        ]
    },
    {
        "id": "ebc7bbf602c46991",
        "type": "debug",
        "z": "2c26b9058db8173f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "9f01acfa2ada3958",
        "type": "inject",
        "z": "2c26b9058db8173f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2022 129310293,24,inside",
        "payloadType": "str",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "84d479588f89237d"
            ]
        ]
    },
    {
        "id": "7a963a77bbd85a36",
        "type": "debug",
        "z": "2c26b9058db8173f",
        "name": "insert data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 720,
        "wires": []
    },
    {
        "id": "9ddc4701ee067154",
        "type": "inject",
        "z": "0cdf456eee4faca2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "dac3bfe8b92bb500"
            ]
        ]
    },
    {
        "id": "dac3bfe8b92bb500",
        "type": "template",
        "z": "0cdf456eee4faca2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "aa367c1418948e91"
            ]
        ]
    },
    {
        "id": "dd2bda8209ca2df2",
        "type": "debug",
        "z": "0cdf456eee4faca2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "24bb9de73d5e4467",
        "type": "inject",
        "z": "0cdf456eee4faca2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "ce3973cc5c26a5b3"
            ]
        ]
    },
    {
        "id": "ce3973cc5c26a5b3",
        "type": "exec",
        "z": "0cdf456eee4faca2",
        "command": "",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Make the create_env.sh executable",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "c4b05cd7b8e8d73e"
            ],
            [
                "c4b05cd7b8e8d73e"
            ],
            [
                "c4b05cd7b8e8d73e"
            ]
        ]
    },
    {
        "id": "bc8425600f4a5352",
        "type": "exec",
        "z": "0cdf456eee4faca2",
        "command": "",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute create_env script",
        "x": 450,
        "y": 480,
        "wires": [
            [
                "f4e3c6cda70a9823"
            ],
            [
                "f4e3c6cda70a9823"
            ],
            [
                "f4e3c6cda70a9823"
            ]
        ]
    },
    {
        "id": "8915871127737e2a",
        "type": "inject",
        "z": "0cdf456eee4faca2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "bc8425600f4a5352"
            ]
        ]
    },
    {
        "id": "c4b05cd7b8e8d73e",
        "type": "debug",
        "z": "0cdf456eee4faca2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "f4e3c6cda70a9823",
        "type": "debug",
        "z": "0cdf456eee4faca2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 480,
        "wires": []
    },
    {
        "id": "aa367c1418948e91",
        "type": "file",
        "z": "0cdf456eee4faca2",
        "name": "Create env setup bash",
        "filename": "/app/create_env.sh",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 320,
        "wires": [
            [
                "dd2bda8209ca2df2"
            ]
        ]
    }
]